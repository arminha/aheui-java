<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml"><head>



<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Specification</title>

	<link href="219154.xhtml_files/xhtmlContentBody.css" media="all" rel="stylesheet" type="text/css">
	<link href="219154.xhtml_files/template.css" media="all" rel="stylesheet" type="text/css">

</head><body class="xhtmlEditorBody background_no" id="viewXhtml_body">
<h1 class="printNxhtmlTitle hentry" style="display: none;"><a href="http://puzzlet.springnote.com/pages/219154" rel="bookmark">Specification</a></h1>


	<h1 style="text-align: center;">Aheui</h1>
<p style="text-align: center;"><q style="text-align: center;">Why should ASCII have all the fun? :)</q></p>
<p style="text-align: right;"><a href="http://puzzlet.springnote.com/pages/219225.xhtml" title="Puzzlet Chung" class="wiki">Puzzlet Chung</a></p>
<p>&nbsp;</p>
<p>Aheui(아희) is an esoteric programming language, first ever to be designed for the <a href="http://en.wikipedia.org/wiki/Hangul" title="Hangeul" class="external">Hangul</a>/Hangeul. The aim of the language is to reflect the graphical design of Hangul.</p>
<p>&nbsp;</p>
<h2>"Aheul"</h2>
<p>"아희"("aheui") is an archaic term for "child" or "youngster", mainly
found as an idiom "아희야"("aheui-ya", coincidently mathches with "<a href="http://en.wikipedia.org/wiki/Oh_Boy" title="Oh, boy!" class="external">Oh, boy!</a>") in 15th-to-18th-century Korean poetry called <a href="http://en.wikipedia.org/wiki/Sijo" title="Sijo" class="external">Sijo</a>.
IPA notation for pronunciation of "aheui" is /ɑ.hɨj/(X-SAMPA
`/A.h1j/`), or /ɑ.hɰi/(`/A.hM\i/`). However, since English language has
no exact equivalent sounds of /ɨ/ and /ɰ/, it is acceptable to call it
"AH-hi"/ɑ.hi/.</p>
<p>&nbsp;</p>
<h2>Structure of Hangul</h2>
<p>Also known as "Korean alphabet", Hangul is truly an alphabetic
system, in which each symbol represents separate phoneme, or sound.</p>
<p>&nbsp;</p>
<blockquote>
<p>아희</p>
</blockquote>
<p>&nbsp;</p>
<p>Every Hangul letter has a structure, that is, a constant is
juxtaposed or surrounded by a vowel. You can recognize vowel symbols
easily, as they are bar-shaped, often with an attached little rod or
two. All of Hangul vowel symbols are following:</p>
<blockquote>
<p>ㅏㅓㅗㅜㅡㅣ<br>
ㅑㅕㅛㅠㅢ<br>
<br>
ㅘㅚ　ㅐㅙ<br>
ㅝㅟ　ㅔㅞ</p>
</blockquote>
<p>Last eight complex vowels are not recognized as a feature of Aheui but as ornamental symbols; so you can ignore them.</p>
<p>&nbsp;</p>
<p>Lecturing on which-symbol-stands-for-which-sound is too far from the
purpose of this document. However, it is notable that similar-looking
symbols represent similar sound, as all consonants can be classified
into five groups:</p>
<blockquote>
<p>ㄱㅋ<br>
ㄴㄷㅌㄹ<br>
ㅁㅂㅍ<br>
ㅅㅈㅊ<br>
ㅇㅎ</p>
</blockquote>
<p>These consonants can also be placed under each letter, as well as on
the top of the character surrounded by a vowel. The consonant on the
top is called the "initial" consonant while on the bottom is the
"final" consonant.</p>
<p>&nbsp;</p>
<blockquote>
<p>안흼</p>
</blockquote>
<p>&nbsp;</p>
<p>In Aheui, functions of consonants and vowels are different each other.</p>
<p>&nbsp;</p>
<h2>Aheui specification</h2>
<p><span style="color: rgb(255, 0, 0);"><strong>WARNING:</strong> This spec is incomplete and subject to change.</span></p>
<p>&nbsp;</p>
<p>Typical code of Aheui is a two-dimensional space of Hangul
characters, where each character is a command. In there cursor is
moving around to execute the character which is under the cursor,
similar to the intruction pointer of Funge-98.</p>
<p>&nbsp;</p>
<p>As mentioned above, consonants and vowels have different fuctions.
While the consonant is the actual instruction, the vowel is to
determine the cursor's next position. Precisely, when the cursor meets
a character, it is engaged to the following process:</p>
<ul>
<li>Cursor executes the command, according to the initial consonant of
the character. Final consonant might be used as an argument, if needed
by the initial.</li>
<li>Cursor moves, according to the vowel's direction.</li>
</ul>
<p>There is more than one storage in Aheui. Most of them stacks, and
one queue. Also the extension feature is treated as a quasi-stack where
you "push" the input packets and "pop" the output packets. In any of
the instructions involving a pop or two, including duplication, if a
storage has less element than the instruction requires, the cursor
doesn't execute the instruction but moves according to the vowel only.</p>
<p>&nbsp;</p>
<h3>Vowels: the Directions</h3>
<p>Little rod attached to the bar indicates the direction of the cursor.</p>
<ul>
<li>ㅏ, ㅓ, ㅗ, and ㅜ moves cursor by one character right, left, top, bottom respectively.</li>
<li>ㅑ, ㅕ, ㅛ, and ㅠ moves cursor by two characters right, left, top, bottom respectively.</li>
<li>ㅡ, ㅣ, and&nbsp; ㅢ are the "reflectors". The cursor moves back to
where it had come from. While ㅢ reflects all movement of the cursor, ㅡ
reflects only vertical movement of the cursor, as ㅣ does horizontal
movement only. The movement which is not reflected moves in the
direction it went, by the law of inertia.</li>
</ul>
<p>&nbsp;</p>
<h3>Consonants: the Commands</h3>
<p>The ㅇ group: null</p>
<ul>
<li>ㅇ, as it is shaped, is the <strong>null</strong> command, which does nothing. The cursor will immediately move as the vowel indicates.</li>
<li>ㅎ is the <strong>terminate</strong> command. The cursor stops at the character and terminates the execution.</li>
</ul>
<p>Hence "아희" itself is the code, which would be a null program.</p>
<p>&nbsp;</p>
<p>The ㄴ group: arithmatic</p>
<ul>
<li>ㄷ is the <strong>add</strong> command. The cursor pops two element from the current storage, and pushes the sum of two values.</li>
<li>ㄸ is shaped double-ㄷ, hence the <strong>multiply</strong> command. The cursor pops two element from the current storage, and pushes the product of two values.</li>
<li>ㄴ is the <strong>divide</strong> command. The cursor pops two
element from the current storage, divide latter value by former
value(latter/former), and pushes the result.</li>
<li>ㅌ is the <strong>subtract</strong> command. The cursor pops two
element from the current storage, subtract former value from latter
value(latter-former), and pushes the result.</li>
<li>ㄹ is the <strong>modulo</strong> command. The cursor pops two element from the current storage, and pushes (latter value) modulo (former value)</li>
</ul>
<p>The ㅁ group: storage</p>
<ul>
<li>ㅁ is the <strong>pop</strong> command. The cursor pops an element from the current storage. Final consonanat can be applied by case. (See below.)</li>
<li>ㅂ is the <strong>push</strong> command. The cursor pushes an
element to the current storage. The value to push is specified by the
final consonant. (See below.)</li>
<li>ㅃ, double-ㅂ, is the&nbsp;<strong>duplicate</strong> command. If the
current storage is a stack, the cursor copies the top element. If the
current storage is a queue, the cursor copies the front element.</li>
<li>ㅍ is the <strong>swap</strong> command. The cursor swaps two elements .</li>
</ul>
<p>&nbsp;In ㅁ command, only ㅇ and ㅎ are recognized as a final
consonant. With ㅇ, the cursor pops an element from the storage and
prints it as an integer. ㅎ specifies the cursor prints the character
corresponding the value as the Unicode codepoint.</p>
<p>That is same as in ㅂ command, where ㅇ specifies the cursor to
receives an integer from user input and pushes it into the storage, and
ㅎ receives a character and pushes the Unicode code point. And other
final consonant of the ㅂ command stands for the value to be pushed into
the storage, which is specified by the line segments that the consonant
is consist of:</p>
<table class="datatable" summary="표에 대한 요약 설명">
<tbody>
<tr>
<td>&nbsp;ㄱ</td>
<td>ㄴ</td>
<td>ㄷ</td>
<td>ㄹ</td>
<td>ㅁ</td>
<td>ㅂ</td>
<td>ㅅ</td>
<td>ㅈ</td>
<td>ㅊ</td>
<td>ㅋ</td>
<td>ㅌ</td>
<td>ㅍ</td>
</tr>
<tr>
<td>&nbsp;2</td>
<td>&nbsp;2</td>
<td>&nbsp;3</td>
<td>&nbsp;5</td>
<td>&nbsp;4</td>
<td>&nbsp;4</td>
<td>&nbsp;2</td>
<td>&nbsp;3</td>
<td>&nbsp;4</td>
<td>&nbsp;3</td>
<td>&nbsp;4</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>In Korean language, these "consonant clusters" are also valid as
placed in the final. They are also used in Ahui&nbsp; usefully for
higher number, if you can remember which one is valid:</p>
<table class="datatable" summary="표에 대한 요약 설명">
<tbody>
<tr>
<td>&nbsp;ㄲ</td>
<td>ㄳ</td>
<td>ㄵ</td>
<td>ㄶ</td>
<td>ㄺ</td>
<td>ㄻ</td>
<td>ㄼ</td>
<td>ㄽ</td>
<td>ㄾ</td>
<td>ㄿ</td>
<td>ㅀ</td>
<td>ㅄ</td>
<td>ㅆ</td>
</tr>
<tr>
<td>&nbsp;4</td>
<td>&nbsp;4</td>
<td>&nbsp;5</td>
<td>&nbsp;5</td>
<td>&nbsp;7</td>
<td>&nbsp;9</td>
<td>&nbsp;9</td>
<td>&nbsp;7</td>
<td>&nbsp;9</td>
<td>&nbsp;9</td>
<td>&nbsp;8</td>
<td>&nbsp;6</td>
<td>&nbsp;4</td>
</tr>
</tbody>
</table>
<p>ㅂ command with no final consonant pushes zero. There is no way to
push 1 explicitly, but it is possible by simple arithmatic, such as
`반반나`(2/2), `밤받타`(4-3).</p>
<p>The ㅅ group: miscellaneous</p>
<ul>
<li>ㅅ is <strong>select</strong> command, where the cursor selects the storage. The final consonant specifies which storage is to be selected. (See below.)</li>
<li>ㅆ is <strong>transfer</strong> commmand. The cursor pops an element
from the current storage, and pushes it into the storage that the final
consonant indicates.</li>
<li>ㅈ is shaped like balance scales, and this is the <strong>compare</strong>
command. The cursor pops two elements from the current storage. If the
latter value is grater than or equal to the former value, the cursor
pushes 1, otherwise 0.</li>
<li>ㅊ has many forks, so it is the <strong>decide</strong> command. The
cursor pops an element from the current storage. If the value is
non-zero, the cursor moves as is specified by the vowel. If the value
is zero, the cursor moves *opposite* from the vowel's direction.</li>
</ul>
<p>&nbsp;Storages you can specify with ㅅ and ㅆ commands are (none), ㄱ,
ㄴ, ㄷ, ㄹ, ㅁ, ㅂ, ㅇ, ㅅ, ㅈ, ㅊ, ㅋ, ㅌ, ㅍ, ㅎ, ㄲ, ㄳ, ㄵ, ㄶ, ㄺ, ㄻ, ㄼ, ㄽ, ㄾ, ㄿ, ㅀ,
ㅄ, and ㅆ. All are stacks except ㅇ, which is the queue, and ㅎ, which is
the protocol the cursor communicate with an extension.</p>
<p>The default storage which is selected at the very beginning of the execusion is the (none) stack.</p>
<p>&nbsp;</p>
<h3>Implementation</h3>
<p>The code of Aheui is written in UTF-8 encoding. Only Hangul
syllables (from U+!AC00 to U+!D7A3) are recognized as a command; others
are ignored.</p>
<p>&nbsp;</p>
<h3>Example</h3>
<p>This code prints "Hello, world!"</p>
<ol class="code">
<li>밤밣따빠밣밟따뿌</li>
<li>빠맣파빨받밤뚜뭏</li>
<li>돋밬탕빠맣붏두붇</li>
<li>볻뫃박발뚷투뭏붖</li>
<li>뫃도뫃희멓뭏뭏붘</li>
<li>뫃봌토범더벌뿌뚜</li>
<li>뽑뽀멓멓더벓뻐뚠</li>
<li>뽀덩벐멓뻐덕더벅</li>
</ol>
<p>&nbsp;</p>
<h3>Acknowledgement</h3>
<p>I would like to thank Seong-hoon "Tokigun" Kang who helped me a lot working with the specification.</p>
<p>&nbsp;</p>
<h3>Links</h3>
<ul>
<li><a href="http://puzzlet.org/html/jsaheui.html" title="http://puzzlet.org/html/jsaheui.html" class="external">http://puzzlet.org/html/jsaheui.html</a>&nbsp;- interpreter written in JavaScript</li>
<li><a href="http://dev.tokigun.net/esolang/ahui/ahui.py" title="http://dev.tokigun.net/esolang/ahui/ahui.py" class="external">http://dev.tokigun.net/esolang/ahui/ahui.py</a> - interpreter written in Python</li>
</ul>
<p>&nbsp;</p>




</body></html>